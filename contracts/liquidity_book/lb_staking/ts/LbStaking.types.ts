/**
* This file was automatically generated by @cosmwasm/ts-codegen@0.35.3.
* DO NOT MODIFY IT BY HAND. Instead, modify the source JSONSchema file,
* and run the @cosmwasm/ts-codegen generate command to regenerate this file.
*/

export type ExecuteMsg = {
  claim_rewards: {};
} | {
  end_epoch: {
    rewards_distribution: RewardsDistribution;
  };
} | {
  unstake: {
    amounts: Uint256[];
    token_ids: number[];
  };
} | {
  snip1155_receive: Snip1155ReceiveMsg;
} | {
  receive: Snip20ReceiveMsg;
} | {
  register_reward_tokens: ContractInfo[];
} | {
  update_config: {
    admin_auth?: RawContract | null;
    epoch_duration?: number | null;
    expiry_duration?: number | null;
    query_auth?: RawContract | null;
  };
} | {
  recover_funds: {};
} | {
  create_viewing_key: {
    entropy: string;
  };
} | {
  set_viewing_key: {
    key: string;
  };
} | {
  revoke_permit: {
    permit_name: string;
  };
};
export type Uint256 = string;
export type Addr = string;
export type Binary = string;
export type Uint128 = string;
export interface RewardsDistribution {
  denominator: number;
  ids: number[];
  weightages: number[];
}
export interface Snip1155ReceiveMsg {
  amount: Uint256;
  from: Addr;
  memo?: string | null;
  msg?: Binary | null;
  sender: Addr;
  token_id: string;
  [k: string]: unknown;
}
export interface Snip20ReceiveMsg {
  amount: Uint128;
  from: string;
  memo?: string | null;
  msg?: Binary | null;
  sender: string;
}
export interface ContractInfo {
  address: Addr;
  code_hash?: string;
  [k: string]: unknown;
}
export interface RawContract {
  address: string;
  code_hash: string;
}
export interface InstantiateMsg {
  admin_auth: RawContract;
  amm_pair: string;
  epoch_duration: number;
  epoch_index: number;
  expiry_duration?: number | null;
  lb_token: RawContract;
  query_auth?: RawContract | null;
  recover_funds_receiver: Addr;
}
export type QueryAnswer = {
  contract_info: {
    admin_auth: ContractInfo;
    epoch_durations: number;
    epoch_index: number;
    expiry_durations?: number | null;
    lb_pair: Addr;
    lb_token: ContractInfo;
    query_auth?: ContractInfo | null;
  };
} | {
  registered_tokens: ContractInfo[];
} | {
  id_total_balance: {
    amount: Uint256;
  };
} | {
  balance: {
    amount: Uint256;
  };
} | {
  all_balances: OwnerBalance[];
} | {
  liquidity: Liquidity[];
} | {
  token_id_balance: {
    total_supply?: Uint256 | null;
  };
} | {
  transaction_history: {
    count: number;
    txns: Tx[];
  };
} | {
  viewing_key_error: {
    msg: string;
  };
};
export type TxAction = {
  stake: {
    amounts: Uint256[];
    ids: number[];
  };
} | {
  un_stake: {
    amounts: Uint256[];
    ids: number[];
  };
} | {
  claim_rewards: Reward[];
};
export interface OwnerBalance {
  amount: Uint256;
  token_id: string;
}
export interface Liquidity {
  token_id: string;
  total_liquidity: Uint256;
  user_liquidity: Uint256;
}
export interface Tx {
  action: TxAction;
  block_height: number;
  block_time: number;
  tx_id: number;
}
export interface Reward {
  epoch_index: number;
  rewards: RewardToken[];
}
export interface RewardToken {
  amounts: Uint128[];
  ids: number[];
  token: ContractInfo;
  total_amount: Uint128;
}
export type QueryMsg = {
  contract_info: {};
} | {
  registered_tokens: {};
} | {
  id_total_balance: {
    id: string;
  };
} | {
  balance: {
    key: string;
    owner: Addr;
    token_id: string;
  };
} | {
  all_balances: {
    key: string;
    owner: Addr;
    page?: number | null;
    page_size?: number | null;
  };
} | {
  liquidity: {
    key: string;
    owner: Addr;
    round_index?: number | null;
    token_ids: number[];
  };
} | {
  transaction_history: {
    key: string;
    owner: Addr;
    page?: number | null;
    page_size?: number | null;
    txn_type: QueryTxnType;
  };
} | {
  with_permit: {
    permit: PermitForTokenPermissions;
    query: QueryWithPermit;
  };
};
export type QueryTxnType = "all" | "stake" | "un_stake" | "claim_rewards";
export type TokenPermissions = "allowance" | "balance" | "history" | "owner";
export type QueryWithPermit = {
  balance: {
    owner: Addr;
    token_id: string;
  };
} | {
  all_balances: {
    page?: number | null;
    page_size?: number | null;
  };
} | {
  transaction_history: {
    page?: number | null;
    page_size: number;
  };
};
export interface PermitForTokenPermissions {
  params: PermitParamsForTokenPermissions;
  signature: PermitSignature;
  [k: string]: unknown;
}
export interface PermitParamsForTokenPermissions {
  allowed_tokens: string[];
  chain_id: string;
  permissions: TokenPermissions[];
  permit_name: string;
  [k: string]: unknown;
}
export interface PermitSignature {
  pub_key: PubKey;
  signature: Binary;
  [k: string]: unknown;
}
export interface PubKey {
  type: string;
  value: Binary;
  [k: string]: unknown;
}