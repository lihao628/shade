/**
 * This file was automatically generated by @cosmwasm/ts-codegen@0.35.3.
 * DO NOT MODIFY IT BY HAND. Instead, modify the source JSONSchema file,
 * and run the @cosmwasm/ts-codegen generate command to regenerate this file.
 */

export type ExecuteMsg =
  | {
      mint_tokens: {
        memo?: string | null;
        mint_tokens: TokenAmount[];
        padding?: string | null;
        [k: string]: unknown;
      };
    }
  | {
      burn_tokens: {
        burn_tokens: TokenAmount[];
        memo?: string | null;
        padding?: string | null;
        [k: string]: unknown;
      };
    }
  | {
      change_metadata: {
        private_metadata?: Metadata | null;
        public_metadata?: Metadata | null;
        token_id: string;
        [k: string]: unknown;
      };
    }
  | {
      transfer: {
        amount: Uint256;
        from: Addr;
        memo?: string | null;
        padding?: string | null;
        recipient: Addr;
        token_id: string;
        [k: string]: unknown;
      };
    }
  | {
      batch_transfer: {
        actions: TransferAction[];
        padding?: string | null;
        [k: string]: unknown;
      };
    }
  | {
      send: {
        amount: Uint256;
        from: Addr;
        memo?: string | null;
        msg?: Binary | null;
        padding?: string | null;
        recipient: Addr;
        recipient_code_hash?: string | null;
        token_id: string;
        [k: string]: unknown;
      };
    }
  | {
      batch_send: {
        actions: SendAction[];
        padding?: string | null;
        [k: string]: unknown;
      };
    }
  | {
      give_permission: {
        allowed_address: Addr;
        padding?: string | null;
        token_id: string;
        transfer?: Uint256 | null;
        transfer_expiry?: Expiration | null;
        view_balance?: boolean | null;
        view_balance_expiry?: Expiration | null;
        view_private_metadata?: boolean | null;
        view_private_metadata_expiry?: Expiration | null;
        [k: string]: unknown;
      };
    }
  | {
      revoke_permission: {
        allowed_address: Addr;
        owner: Addr;
        padding?: string | null;
        token_id: string;
        [k: string]: unknown;
      };
    }
  | {
      create_viewing_key: {
        entropy: string;
        padding?: string | null;
        [k: string]: unknown;
      };
    }
  | {
      set_viewing_key: {
        key: string;
        padding?: string | null;
        [k: string]: unknown;
      };
    }
  | {
      revoke_permit: {
        padding?: string | null;
        permit_name: string;
        [k: string]: unknown;
      };
    }
  | {
      register_receive: {
        code_hash: string;
        padding?: string | null;
        [k: string]: unknown;
      };
    };
export type Addr = string;
export type Uint256 = string;
export type Binary = string;
export type Expiration =
  | {
      at_height: number;
    }
  | {
      at_time: number;
    }
  | "never";
export interface TokenAmount {
  balances: TokenIdBalance[];
  token_id: string;
  [k: string]: unknown;
}
export interface TokenIdBalance {
  address: Addr;
  amount: Uint256;
  [k: string]: unknown;
}
export interface Metadata {
  extension?: Extension | null;
  token_uri?: string | null;
  [k: string]: unknown;
}
export interface Extension {
  animation_url?: string | null;
  attributes?: Trait[] | null;
  background_color?: string | null;
  description?: string | null;
  external_url?: string | null;
  image?: string | null;
  image_data?: string | null;
  media?: MediaFile[] | null;
  name?: string | null;
  protected_attributes?: string[] | null;
  token_subtype?: string | null;
  youtube_url?: string | null;
  [k: string]: unknown;
}
export interface Trait {
  display_type?: string | null;
  max_value?: string | null;
  trait_type?: string | null;
  value: string;
  [k: string]: unknown;
}
export interface MediaFile {
  authentication?: Authentication | null;
  extension?: string | null;
  file_type?: string | null;
  url: string;
  [k: string]: unknown;
}
export interface Authentication {
  key?: string | null;
  user?: string | null;
  [k: string]: unknown;
}
export interface TransferAction {
  amount: Uint256;
  from: Addr;
  memo?: string | null;
  recipient: Addr;
  token_id: string;
  [k: string]: unknown;
}
export interface SendAction {
  amount: Uint256;
  from: Addr;
  memo?: string | null;
  msg?: Binary | null;
  recipient: Addr;
  recipient_code_hash?: string | null;
  token_id: string;
  [k: string]: unknown;
}
export type TknConfig =
  | {
      fungible: {
        decimals: number;
        enable_burn: boolean;
        enable_mint: boolean;
        minter_may_update_metadata: boolean;
        minters: Addr[];
        public_total_supply: boolean;
        [k: string]: unknown;
      };
    }
  | {
      nft: {
        enable_burn: boolean;
        minter_may_update_metadata: boolean;
        minters: Addr[];
        owner_is_public: boolean;
        owner_may_update_metadata: boolean;
        public_total_supply: boolean;
        [k: string]: unknown;
      };
    };
export interface InstantiateMsg {
  admin?: Addr | null;
  curators: Addr[];
  entropy: string;
  has_admin: boolean;
  initial_tokens: CurateTokenId[];
  lb_pair_info: LbPair;
  [k: string]: unknown;
}
export interface CurateTokenId {
  balances: TokenIdBalance[];
  token_info: TokenInfoMsg;
  [k: string]: unknown;
}
export interface TokenInfoMsg {
  name: string;
  private_metadata?: Metadata | null;
  public_metadata?: Metadata | null;
  symbol: string;
  token_config: TknConfig;
  token_id: string;
  [k: string]: unknown;
}
export interface LbPair {
  decimals: number;
  lb_pair_address: Addr;
  name: string;
  symbol: string;
  [k: string]: unknown;
}
export type QueryAnswer =
  | {
      token_contract_info: {
        admin?: Addr | null;
        all_token_ids: string[];
        curators: Addr[];
        [k: string]: unknown;
      };
    }
  | {
      id_total_balance: {
        amount: Uint256;
        [k: string]: unknown;
      };
    }
  | {
      balance: {
        amount: Uint256;
        [k: string]: unknown;
      };
    }
  | {
      all_balances: OwnerBalance[];
    }
  | {
      transaction_history: {
        total: number;
        txs: Tx[];
        [k: string]: unknown;
      };
    }
  | {
      permission: Permission | null;
    }
  | {
      all_permissions: {
        permission_keys: PermissionKey[];
        permissions: Permission[];
        total: number;
        [k: string]: unknown;
      };
    }
  | {
      token_id_public_info: {
        owner?: Addr | null;
        token_id_info: StoredTokenInfo;
        total_supply?: Uint256 | null;
        [k: string]: unknown;
      };
    }
  | {
      token_id_private_info: {
        owner?: Addr | null;
        token_id_info: StoredTokenInfo;
        total_supply?: Uint256 | null;
        [k: string]: unknown;
      };
    }
  | {
      registered_code_hash: {
        code_hash?: string | null;
        [k: string]: unknown;
      };
    }
  | {
      viewing_key_error: {
        msg: string;
        [k: string]: unknown;
      };
    };
export type TxAction =
  | {
      mint: {
        amount: Uint256;
        minter: Addr;
        recipient: Addr;
        [k: string]: unknown;
      };
    }
  | {
      burn: {
        amount: Uint256;
        burner?: Addr | null;
        owner: Addr;
        [k: string]: unknown;
      };
    }
  | {
      transfer: {
        amount: Uint256;
        from: Addr;
        recipient: Addr;
        sender?: Addr | null;
        [k: string]: unknown;
      };
    };
export interface OwnerBalance {
  amount: Uint256;
  token_id: string;
  [k: string]: unknown;
}
export interface Tx {
  action: TxAction;
  block_height: number;
  block_time: number;
  memo?: string | null;
  token_id: string;
  tx_id: number;
  [k: string]: unknown;
}
export interface Permission {
  trfer_allowance_exp: Expiration;
  trfer_allowance_perm: Uint256;
  view_balance_exp: Expiration;
  view_balance_perm: boolean;
  view_pr_metadata_exp: Expiration;
  view_pr_metadata_perm: boolean;
  [k: string]: unknown;
}
export interface PermissionKey {
  allowed_addr: Addr;
  token_id: string;
  [k: string]: unknown;
}
export interface StoredTokenInfo {
  curator: Addr;
  name: string;
  private_metadata?: Metadata | null;
  public_metadata?: Metadata | null;
  symbol: string;
  token_config: TknConfig;
  token_id: string;
  [k: string]: unknown;
}
export type QueryMsg =
  | {
      token_contract_info: {
        [k: string]: unknown;
      };
    }
  | {
      id_total_balance: {
        id: string;
        [k: string]: unknown;
      };
    }
  | {
      balance: {
        key: string;
        owner: Addr;
        token_id: string;
        viewer: Addr;
        [k: string]: unknown;
      };
    }
  | {
      all_balances: {
        key: string;
        owner: Addr;
        tx_history_page?: number | null;
        tx_history_page_size?: number | null;
        [k: string]: unknown;
      };
    }
  | {
      transaction_history: {
        address: Addr;
        key: string;
        page?: number | null;
        page_size: number;
        [k: string]: unknown;
      };
    }
  | {
      permission: {
        allowed_address: Addr;
        key: string;
        owner: Addr;
        token_id: string;
        [k: string]: unknown;
      };
    }
  | {
      all_permissions: {
        address: Addr;
        key: string;
        page?: number | null;
        page_size: number;
        [k: string]: unknown;
      };
    }
  | {
      token_id_public_info: {
        token_id: string;
        [k: string]: unknown;
      };
    }
  | {
      token_id_private_info: {
        address: Addr;
        key: string;
        token_id: string;
        [k: string]: unknown;
      };
    }
  | {
      registered_code_hash: {
        contract: Addr;
        [k: string]: unknown;
      };
    }
  | {
      with_permit: {
        permit: PermitForTokenPermissions;
        query: QueryWithPermit;
        [k: string]: unknown;
      };
    };
export type TokenPermissions = "allowance" | "balance" | "history" | "owner";
export type QueryWithPermit =
  | {
      balance: {
        owner: Addr;
        token_id: string;
        [k: string]: unknown;
      };
    }
  | {
      all_balances: {
        tx_history_page?: number | null;
        tx_history_page_size?: number | null;
        [k: string]: unknown;
      };
    }
  | {
      transaction_history: {
        page?: number | null;
        page_size: number;
        [k: string]: unknown;
      };
    }
  | {
      permission: {
        allowed_address: Addr;
        owner: Addr;
        token_id: string;
        [k: string]: unknown;
      };
    }
  | {
      all_permissions: {
        page?: number | null;
        page_size: number;
        [k: string]: unknown;
      };
    }
  | {
      token_id_private_info: {
        token_id: string;
        [k: string]: unknown;
      };
    };
export interface PermitForTokenPermissions {
  params: PermitParamsForTokenPermissions;
  signature: PermitSignature;
  [k: string]: unknown;
}
export interface PermitParamsForTokenPermissions {
  allowed_tokens: string[];
  chain_id: string;
  permissions: TokenPermissions[];
  permit_name: string;
  [k: string]: unknown;
}
export interface PermitSignature {
  pub_key: PubKey;
  signature: Binary;
  [k: string]: unknown;
}
export interface PubKey {
  type: string;
  value: Binary;
  [k: string]: unknown;
}
